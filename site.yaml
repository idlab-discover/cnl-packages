entries:
  cnl-quickstart:
    0.1.0:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
    0.1.1:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
      namespaces:
      - kafka
      - argocd
    0.1.10:
      afterInstallationManual: "# What to do after installing?\nCNl Quickstart installs\
        \ the following application ready for use:\n- ArgoCD\n- Kafka\n- Prometheus\n\
        - Grafana\n\nIn the sections below you can find a short descriptions and info\
        \ on how to get started with each of these tools.\n## ArgoCD\nPurpose: GitOps\
        \ \nNamespace: `argocd`\nShort description: Argo CD is a declarative, GitOps\
        \ continuous delivery tool for Kubernetes.\nUsage:\n1. Retrieve the admin\
        \ password from the secret `argocd-initial-admin-secret`:\n    ```bash\n \
        \   $ KUBECONFIG=\"/home/sander/Downloads/kube-test\" kubectl -n argocd get\
        \ secret argocd-initial-admin-secret -o yaml\n    apiVersion: v1\n   data:\n\
        \      password: bEFkdnJRVDczOWJKTXRRdA==\n    kind: Secret\n    metadata:\n\
        \      creationTimestamp: \"2024-10-30T13:32:18Z\"\n      name: argocd-initial-admin-secret\n\
        \      namespace: argocd\n      resourceVersion: \"5482274\"\n      uid: 69decba4-16d2-4ff1-bff7-a61be85bc163\n\
        \    type: Opaque\n    ```\n2. Decode the password value:\n    `$ echo -n\
        \ \"bEFkdnJRVDczOWJKTXRRdA==\" | base64 --decode`\n3. Set up a port-forward\
        \ from the argocd clusterip service to your localhost:\n    `kubectl port-forward\
        \ svc/argocd-server -n argocd 8080:443`\n4. Navigate with your browser to\
        \ http://localhost:8080 and login with the username `admin`.\n\n## Kafka\n\
        Purpose: Message broker\nNamespace: `kafka`\nShort description: Kafka is primarily\
        \ used to build real-time streaming data pipelines and applications that adapt\
        \ to the data streams. It combines messaging, storage, and stream processing\
        \ to allow storage and analysis of both historical and real-time data.\nUsage:\n\
        CNL quickstart uses the [Strimzi Kafka operator](https://strimzi.io/documentation/).\
        \ A single broker using KRaft is deployed. You can write (produce) messages\
        \ to a topic with:\n  \n```bash\nkubectl -n kafka run kafka-producer -ti --image=quay.io/strimzi/kafka:0.44.0-kafka-3.8.0\
        \ --rm=true --restart=Never -- bin/kafka-console-producer.sh --bootstrap-server\
        \ cnl-kafka-kafka-bootstrap:9092 --topic my-topic\n```\nNotice the `--bootstrap-server`\
        \ argument matches the bootstrap service in the `kafka` namespace. The topic\
        \ will be automatically created. Reading from the same topic can be done with\
        \ the following:\n\n```bash\nkubectl -n kafka run kafka-consumer -ti --image=quay.io/strimzi/kafka:0.44.0-kafka-3.8.0\
        \ --rm=true --restart=Never -- bin/kafka-console-consumer.sh --bootstrap-server\
        \ cnl-kafka-kafka-bootstrap:9092 --topic my-topic --from-beginning\n```\n\n\
        ## Prometheus\nPurpose: Monitoring and alerting toolkit\nNamespace: `monitoring`\n\
        Short description: Prometheus is typically used to collect numeric metrics\
        \ from services that run 24/7 and allow metric data to be accessed via HTTP\
        \ endpoints.\nUsage: CNL quickstart uses the [Prometheus operator](https://prometheus-operator.dev/).\n\
        \n## Grafana\nPurpose: Analyze and visualize data\nNamespace: `monitoring`\n\
        Short description: Interactive visualization web application. It can produce\
        \ charts, graphs, and alerts for the web when connected to supported data\
        \ sources.\nUsage:\nCNL quickstart uses the [Grafana operator](https://grafana.github.io/grafana-operator/docs/).\
        \ Access the UI by port forwarding the grafana service:\n\n```bash\nkubectl\
        \ -n monitoring port-forward service/grafana-service 3000:3000\n```\nThen\
        \ navigate to http://localhost:3000 and use the credentials `root/secret`.\n"
      argocd:
        syncOptions:
        - ServerSideApply=true
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
      namespaces:
      - kafka
      - argocd
      - monitoring
    0.1.11:
      afterInstallationManual: "# What to do after installing?\nCNl Quickstart installs\
        \ the following application ready for use:\n- ArgoCD\n- Kafka\n- Prometheus\n\
        - Grafana\n\nIn the sections below you can find a short descriptions and info\
        \ on how to get started with each of these tools.\n## ArgoCD\nPurpose: GitOps\
        \ \nNamespace: `argocd`\nShort description: Argo CD is a declarative, GitOps\
        \ continuous delivery tool for Kubernetes.\nUsage:\n1. Retrieve the admin\
        \ password from the secret `argocd-initial-admin-secret`:\n    ```bash\n \
        \   $ KUBECONFIG=\"/home/sander/Downloads/kube-test\" kubectl -n argocd get\
        \ secret argocd-initial-admin-secret -o yaml\n    apiVersion: v1\n   data:\n\
        \      password: bEFkdnJRVDczOWJKTXRRdA==\n    kind: Secret\n    metadata:\n\
        \      creationTimestamp: \"2024-10-30T13:32:18Z\"\n      name: argocd-initial-admin-secret\n\
        \      namespace: argocd\n      resourceVersion: \"5482274\"\n      uid: 69decba4-16d2-4ff1-bff7-a61be85bc163\n\
        \    type: Opaque\n    ```\n2. Decode the password value:\n    `$ echo -n\
        \ \"bEFkdnJRVDczOWJKTXRRdA==\" | base64 --decode`\n3. Set up a port-forward\
        \ from the argocd clusterip service to your localhost:\n    `kubectl port-forward\
        \ svc/argocd-server -n argocd 8080:443`\n4. Navigate with your browser to\
        \ http://localhost:8080 and login with the username `admin`.\n\n## Kafka\n\
        Purpose: Message broker\nNamespace: `kafka`\nShort description: Kafka is primarily\
        \ used to build real-time streaming data pipelines and applications that adapt\
        \ to the data streams. It combines messaging, storage, and stream processing\
        \ to allow storage and analysis of both historical and real-time data.\nUsage:\n\
        CNL quickstart uses the [Strimzi Kafka operator](https://strimzi.io/documentation/).\
        \ A single broker using KRaft is deployed. You can write (produce) messages\
        \ to a topic with:\n  \n```bash\nkubectl -n kafka run kafka-producer -ti --image=quay.io/strimzi/kafka:0.44.0-kafka-3.8.0\
        \ --rm=true --restart=Never -- bin/kafka-console-producer.sh --bootstrap-server\
        \ cnl-kafka-kafka-bootstrap:9092 --topic my-topic\n```\nNotice the `--bootstrap-server`\
        \ argument matches the bootstrap service in the `kafka` namespace. The topic\
        \ will be automatically created. Reading from the same topic can be done with\
        \ the following:\n\n```bash\nkubectl -n kafka run kafka-consumer -ti --image=quay.io/strimzi/kafka:0.44.0-kafka-3.8.0\
        \ --rm=true --restart=Never -- bin/kafka-console-consumer.sh --bootstrap-server\
        \ cnl-kafka-kafka-bootstrap:9092 --topic my-topic --from-beginning\n```\n\n\
        ## Prometheus\nPurpose: Monitoring and alerting toolkit\nNamespace: `monitoring`\n\
        Short description: Prometheus is typically used to collect numeric metrics\
        \ from services that run 24/7 and allow metric data to be accessed via HTTP\
        \ endpoints.\nUsage: CNL quickstart uses the [Prometheus operator](https://prometheus-operator.dev/).\n\
        \n## Grafana\nPurpose: Analyze and visualize data\nNamespace: `monitoring`\n\
        Short description: Interactive visualization web application. It can produce\
        \ charts, graphs, and alerts for the web when connected to supported data\
        \ sources.\nUsage:\nCNL quickstart uses the [Grafana operator](https://grafana.github.io/grafana-operator/docs/).\
        \ Access the UI by port forwarding the grafana service:\n\n```bash\nkubectl\
        \ -n monitoring port-forward service/grafana-service 3000:3000\n```\nThen\
        \ navigate to http://localhost:3000 and use the credentials `root/secret`.\n"
      argocd:
        syncOptions:
        - ServerSideApply=true
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
      namespaces:
      - kafka
      - argocd
      - monitoring
    0.1.2:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
      namespaces:
      - kafka
      - argocd
      - prometheus
    0.1.3:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
      namespaces:
      - kafka
      - argocd
      - prometheus
    0.1.4:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
      namespaces:
      - kafka
      - argocd
      - monitoring
    0.1.5:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      argocd:
        syncOptions:
        - ServerSideApply=true
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
      namespaces:
      - kafka
      - argocd
      - monitoring
    0.1.6:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      argocd:
        syncOptions:
        - ServerSideApply=true
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
      namespaces:
      - kafka
      - argocd
      - monitoring
    0.1.7:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      argocd:
        syncOptions:
        - ServerSideApply=true
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
      namespaces:
      - kafka
      - argocd
      - monitoring
    0.1.8:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      argocd:
        syncOptions:
        - ServerSideApply=true
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
      namespaces:
      - kafka
      - argocd
      - monitoring
    0.1.9:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      argocd:
        syncOptions:
        - ServerSideApply=true
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
      namespaces:
      - kafka
      - argocd
      - monitoring
  kafka-quickstart:
    0.1.0:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
    0.1.1:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
    0.1.2:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
    0.1.3:
      afterInstallationManual: '# What to do after installing?

        This is some example text.

        - list

        - items

        '
      clusterSettings:
        controlPlaneMachineCount: 1
        kubernetesVersion: v1.29.0
        machineCores: 4
        workerMachineCount: 1
        workerMachinesMemory: 8
      imageUrl: https://cloud.ilabt.imec.be/index.php/apps/files_sharing/publicpreview/WQcN47BDdEJT8eG?file=/&fileId=1169654706&x=2560&y=1440&a=true&etag=08edc2516139b7357d06302547b7cb93
  nginx:
    1.0.0:
      imageUrl: https://www.nginx.com/wp-content/uploads/2021/08/NGINX-Part-of-F5-horiz-black-type-1.svg
    1.0.1:
      afterInstallationManual: '# What to do after installing?


        This is some example text.

        - list

        - items'
      imageUrl: https://www.nginx.com/wp-content/uploads/2021/08/NGINX-Part-of-F5-horiz-black-type-1.svg
    1.0.2:
      afterInstallationManual: '## What to do after installing?


        This application is exposed using NodePort, to get the IP adress and the port
        of the application run following commands in terminal.

        Make sure your Kubeconfig is correctly exported for this.



        ```bash

        #NodeIP:

        kubectl describe node | grep Addresses: -A 4


        #NodePort:

        kubectl get svc

        ```'
      imageUrl: https://www.nginx.com/wp-content/uploads/2021/08/NGINX-Part-of-F5-horiz-black-type-1.svg
    1.0.3:
      afterInstallationManual: '## What to do after installing?


        This application is exposed using NodePort, to get the IP adress and the port
        of the application run following commands in terminal.

        Make sure your Kubeconfig is correctly exported for this.



        ```bash

        #NodeIP:

        kubectl describe node | grep Addresses: -A 4


        #NodePort:

        kubectl get svc

        ```'
      imageUrl: https://i.imgur.com/JoeEPEP.jpeg
    1.0.4:
      afterInstallationManual: '## What to do after installing?


        This application is exposed using NodePort, to get the IP adress and the port
        of the application run following commands in terminal.

        Make sure your Kubeconfig is correctly exported for this.



        ```bash

        #NodeIP:

        kubectl describe node | grep Addresses: -A 4


        #NodePort:

        kubectl get svc

        ```'
      imageUrl: https://i.imgur.com/JoeEPEP.jpeg
